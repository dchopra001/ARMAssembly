


ARM Macro Assembler    Page 1 


    1 00000000         ; ECE-222 Lab ... Winter 2013 term 
    2 00000000         ; Lab 3 sample code 
    3 00000000                 THUMB                        ; Thumb instruction
                                                             set 
    4 00000000                 AREA             My_code, CODE, READONLY
    5 00000000                 EXPORT           __MAIN
    6 00000000                 ENTRY
    7 00000000         __MAIN
    8 00000000         
    9 00000000         ; The following lines are similar to Lab-1 but use a def
                       ined address to make it easier.
   10 00000000         ; They just turn off all LEDs 
   11 00000000 F8DF A12C       LDR              R10, =LED_BASE_ADR ; R10 is a p
                                                            ermenant pointer to
                                                             the base address f
                                                            or the LEDs, offset
                                                             of 0x20 and 0x40 f
                                                            or the ports
   12 00000004         
   13 00000004 F04F 4330       MOV              R3, #0xB0000000 ; Turn off thre
                                                            e LEDs on port 1  
   14 00000008 F8CA 3020       STR              R3, [r10, #0x20]
   15 0000000C F04F 037C       MOV              R3, #0x0000007C
   16 00000010 F8CA 3040       STR              R3, [R10, #0x40] ; Turn off fiv
                                                            e LEDs on port 2 
   17 00000014         
   18 00000014         
   19 00000014         
   20 00000014         
   21 00000014         ; This line is very important in your main program
   22 00000014         ; Initializes R11 to a 16-bit non-zero value and NOTHING
                        else can write to R11 !!
   23 00000014 F64A 3BCD       MOV              R11, #0xABCD ; Init the random 
                                                            number generator wi
                                                            th a non-zero numbe
                                                            r
   24 00000018 F000 F866 
                       loop    BL               RandomNum
   25 0000001C         ;B    loop
   26 0000001C         
   27 0000001C         ;This is the beginning of the reflex meter project    
   28 0000001C E92D 50EC 
                       REFLEXMETER
                               STMFD            R13!,{R2,R3,R5,R6,R7,R12,R14}
   29 00000020 F8DF C110       LDR              R12, =FIO2PIN ;load the address
                                                             from which we read
                                                             the INT0 button's 
                                                            status
   30 00000024         
   31 00000024         RANDOM_COUNT_DELAY
   32 00000024 F09B 0F00       TEQ              R11,#0      ;RANDOM_COUNT_DELAY
                                                             causes a delay of 
                                                            the random value ge
                                                            nerated in "0.1 ms"
                                                             units
   33 00000028 D004            BEQ              LED_ON      ;once the delay has
                                                             been run for all o
                                                            f random num's leng
                                                            th, we skip to next



ARM Macro Assembler    Page 2 


                                                             step in program 
   34 0000002A F000 F879       BL               DELAY
   35 0000002E F1AB 0B01       SUB              R11,#1
   36 00000032 E7F7            B                RANDOM_COUNT_DELAY
   37 00000034         
   38 00000034 F04F 4250 
                       LED_ON  MOV              R2,#0xD0000000 ;this is where w
                                                            e come once we are 
                                                            done random count f
                                                            unction (LED 29 is 
                                                            turned on in this s
                                                            ection)
   39 00000038 F8CA 2020       STR              R2,[R10,#0X20]
   40 0000003C         
   41 0000003C         
   42 0000003C F04F 0300       MOV              R3,#0       ;Set count value to
                                                             zero
   43 00000040         
   44 00000040 F000 F86E 
                       INCR_POLL
                               BL               DELAY       ;This section creat
                                                            es a delay, adds 1 
                                                            to the counter, and
                                                             then checks if the
                                                             INT0 button has be
                                                            en pressed
   45 00000044 F103 0301       ADD              R3,R3,#1    ;(this is how we me
                                                            asure the user's re
                                                            action in 0.1 milli
                                                            seconds).. If the b
                                                            utton is not presse
                                                            d
   46 00000048         ;then we loop back and increase the count again and caus
                       e a delay. 
   47 00000048         
   48 00000048 F8DC 4000       LDR              R4,[R12]    ;(here we are loadi
                                                            ng the contents of 
                                                            the memory address 
                                                            that has the status
                                                             of int0 button)
   49 0000004C F404 6480       AND              R4,R4,#0x00000400 ;if 10th bit 
                                                            is pressed(or if p2
                                                            .10=int0 button is 
                                                            pressed), anding wi
                                                            th 400 will give 0,
                                                             else it will give 
                                                            400 again 
   50 00000050 F094 0F00       TEQ              R4,#0       ;check to see if an
                                                            ding gave 0, if yes
                                                             then dont execute 
                                                            next instruction an
                                                            d proceed to next s
                                                            egment of program
   51 00000054 D1F4            BNE              INCR_POLL
   52 00000056         
   53 00000056 F04F 0500       MOV              R5,#0x00000000 ;here a new coun
                                                            t value is being se
                                                            t to 0
   54 0000005A F04F 0600       MOV              R6,#0x00000000 ;before moving a



ARM Macro Assembler    Page 3 


                                                            n important value i
                                                            n R6, we clear it
   55 0000005E 461E            MOV              R6,R3       ;Store R3 in R6... 
                                                            this is because we 
                                                            will modify R3, whi
                                                            ch is basically the
                                                             bit pattern we hav
                                                            e to display.
   56 00000060         ;once we have displayed all the bits, we will restore R3
                       's original value back into R3 using R6. Then 
   57 00000060         ;we can display the whole pattern again! Hence this allo
                       ws us to create an endless loop
   58 00000060         
   59 00000060 F000 F822 
                       DISPLAY_ALL
                               BL               DISPLAYBITS ;First display the 
                                                            first 8 bits of the
                                                             value in R3
   60 00000064 EA4F 2313       LSR              R3,#8       ;Right shift by 8 t
                                                            o get access to the
                                                             next 8 bits
   61 00000068 F000 F816       BL               twosecdelay ;Cause a 2 second d
                                                            elay between displa
                                                            ys
   62 0000006C F105 0501       ADD              R5,R5,#1    ;If this count reac
                                                            hes 4, we have disp
                                                            layed all 4 pattern
                                                             sets in R3 
   63 00000070 F095 0F04       TEQ              R5,#4
   64 00000074 D000            BEQ              fivesecdelay ;Once all 4 have b
                                                            een displayed, caus
                                                            e a 5 second delay
   65 00000076 D1F3            BNE              DISPLAY_ALL ;If all 4 not displ
                                                            ayed, delay the nex
                                                            t set of bits
   66 00000078         
   67 00000078 F04F 0300 
                       fivesecdelay
                               MOV              R3,#0x00000000 ;First clear R3-
                                                            ->So we can store t
                                                            he original pattern
                                                             in here again
   68 0000007C F04F 0500       MOV              R5,#0x00000000 ;clear R5-->So w
                                                            hen we display agai
                                                            n we can count to 4
                                                             again
   69 00000080         
   70 00000080 4633            MOV              R3,R6       ;Store original pat
                                                            tern back in R3
   71 00000082 F646 376C       MOV              R7,#0x00006B6C ;Calling the del
                                                            ay this many times 
                                                            causes a 5 second d
                                                            elay roughly (Mathe
                                                            matically it is C35
                                                            0 but that doesnt w
                                                            ork so well practic
                                                            ally)
   72 00000086 EA4F 0747       LSL              R7,#1
   73 0000008A F000 F849 



ARM Macro Assembler    Page 4 


                       fivecheck
                               BL               DELAY
   74 0000008E 3F01            SUBS             R7,#1
   75 00000090 D1FB            BNE              fivecheck
   76 00000092         
   77 00000092 D0E5            BEQ              DISPLAY_ALL ;Once delay has bee
                                                            n called enough tim
                                                            es, go back and dis
                                                            play everything aga
                                                            in
   78 00000094         
   79 00000094         
   80 00000094         
   81 00000094 E8BD 90EC       LDMFD            R13!,{R2,R3,R5,R6,R7,R12,R15}
   82 00000098         
   83 00000098 B580    twosecdelay
                               STMFD            R13!,{R7,R14}
   84 0000009A         
   85 0000009A F644 6720       MOV              R7,#0x00004E20 ;Calling the del
                                                            ay this many times 
                                                            causes a 2 second d
                                                            elay roughly
   86 0000009E F000 F83F 
                       mini    BL               DELAY
   87 000000A2 3F01            SUBS             R7,#1
   88 000000A4 D1FB            BNE              mini
   89 000000A6         
   90 000000A6 BD80            LDMFD            R13!,{R7,R15}
   91 000000A8         
   92 000000A8         
   93 000000A8         ; 
   94 000000A8         
   95 000000A8         ;-------------DISPLAYBITS METHOD------------------------
                       -----------------
   96 000000A8         DISPLAYBITS
   97 000000A8 E92D 4386       STMFD            R13!,{R1,R2,R7,R8,R9,R14}
   98 000000AC F003 01FF       AND              R1,R3,#0x000000FF ;ANDing with 
                                                            this will give us a
                                                            ccess to the Least 
                                                            Significant 8 bits 
                                                            in R3, and store th
                                                            e result in R1
   99 000000B0 F081 01FF       EOR              R1,#0x000000FF ;this operation 
                                                            will flip first 8 b
                                                            its... this is done
                                                             because we want to
                                                             represent bit"1" a
                                                            s ON and bit "0" as
                                                             off... without thi
                                                            s we would get the 
                                                            oppoiste result
  100 000000B4 EA4F 6101       LSL              R1,#24      ;Left Shift to posi
                                                            tion 31,30,29,28,27
                                                            ,26,25,24
  101 000000B8         
  102 000000B8         ;--------------NOW LETS FIRST AFFECT PORT 1 LEDs--------
                       ------------
  103 000000B8 FA91 F2A1       RBIT             R2,R1       ;Reverse order of b
                                                            its and store in R2



ARM Macro Assembler    Page 5 


                                                            .
  104 000000BC         ;the top 3 bits, which need to be mapped to position 31,
                        39,38, are right now in 0,1,2 respectively
  105 000000BC         
  106 000000BC EA4F 7242       LSL              R2,#29      ;LSL by 29 puts the
                                                            n back in 31,30,29
  107 000000C0 F002 4700       AND              R7, R2, #0x80000000 ;This gives
                                                             us access to the 3
                                                            1st bit by anding i
                                                            t with 1 in 31st bi
                                                            t and 0 in the rest
                                                            
  108 000000C4         
  109 000000C4         ;Now we want access to the 29 and 28th bit! BUT these tw
                       o are in the 30th and 29th bit location respectively! So
                        LSR by 1!
  110 000000C4 EA4F 0852       LSR              R8,R2,#1
  111 000000C8         ;Now we can toggle these bit patterns!First add them to 
                       the 31st bit!
  112 000000C8 EB08 0907       ADD              R9,R8,R7
  113 000000CC         ;Now you should have the appropriate pattern in the appr
                       opriate location from 31,..,29,28
  114 000000CC         
  115 000000CC F8CA 9020       STR              R9,[R10,#0x20] ;This should tur
                                                            n p1.31 ON... by wr
                                                            iting 0 in the appr
                                                            opraite location-->
                                                             Out Put: P31 on, o
                                                            ther two off!
  116 000000D0         
  117 000000D0         ;---------------NOW LETS WORK ON PORT 2 LEDs------------
                       ----------------------------
  118 000000D0         ;A very similar logic follows
  119 000000D0 F001 54F8       AND              R4,R1,#0x1F000000 ;AND So only 
                                                            the relvant bits ar
                                                            e active
  120 000000D4 EA4F 0444       LSL              R4,R4,#1    ;LSL by one in prep
                                                             for Reversing all 
                                                            the bits!
  121 000000D8 FA94 F4A4       RBIT             R4,R4       ;R4 now has our PAT
                                                            TERN! (after revers
                                                            ing)
  122 000000DC F8CA 4040       STR              R4,[R10,#0x40] ;Write the patte
                                                            rn in the port to t
                                                            urn appropriate LED
                                                            s off!
  123 000000E0 E8BD 8386       LDMFD            R13!,{R1,R2,R7,R8,R9,R15}
  124 000000E4         
  125 000000E4         ;------------------------DISPLAY BITS METHOD END--------
                       ---------------------
  126 000000E4         
  127 000000E4         ;
  128 000000E4         ; Display the number in R3 onto the 8 LEDs
  129 000000E4 B506    DISPLAY_NUM
                               STMFD            R13!,{R1, R2, R14}
  130 000000E6         
  131 000000E6         ; Usefull commaands:  RBIT (reverse bits), BFC (bit fiel
                       d clear), LSR & LSL to shift bits left and right, ORR & 
                       AND and EOR for bitwise operations



ARM Macro Assembler    Page 6 


  132 000000E6         
  133 000000E6 BD06            LDMFD            R13!,{R1, R2, R15}
  134 000000E8         
  135 000000E8         ;
  136 000000E8         ; R11 holds a random number via a pseudo-random sequence
                        as per the Linear feedback shift register (Fibonacci) o
                       n WikiPedia
  137 000000E8         ;
  138 000000E8         ; R11 MUST be initialized to a non-zero 16-bit value at 
                       the start of the program
  139 000000E8         ; R11 can be read anywhere in the code but must only be 
                       written to by this subroutine
  140 000000E8 B50E    RandomNum
                               STMFD            R13!,{R1, R2, R3, R14}
  141 000000EA         
  142 000000EA F40B 4100       AND              R1, R11, #0x8000
  143 000000EE F40B 5200       AND              R2, R11, #0x2000
  144 000000F2 EA4F 0282       LSL              R2, #2
  145 000000F6 EA81 0302       EOR              R3, R1, R2
  146 000000FA F40B 5180       AND              R1, R11, #0x1000
  147 000000FE EA4F 02C2       LSL              R2, #3
  148 00000102 EA83 0301       EOR              R3, R3, R1
  149 00000106 F40B 6180       AND              R1, R11, #0x0400
  150 0000010A EA4F 1141       LSL              R1, #5
  151 0000010E EA83 0301       EOR              R3, R3, R1  ; the new bit to go
                                                             into the LSB is pr
                                                            esent
  152 00000112 EA4F 33D3       LSR              R3, #15
  153 00000116 EA4F 0B4B       LSL              R11, #1
  154 0000011A EA4B 0B03       ORR              R11, R11, R3
  155 0000011E         
  156 0000011E BD0E            LDMFD            R13!,{R1, R2, R3, R15}
  157 00000120         
  158 00000120         ;
  159 00000120         ;  Delay 0.1ms (100us) * R0 times
  160 00000120         ;   aim for better than 10% accuracy
  161 00000120         
  162 00000120         ;--------------DELAY METHOD-----------------------
  163 00000120 B504    DELAY   STMFD            R13!,{R2, R14}
  164 00000122 F04F 0264       MOV              R2, #0x00000064 ;counting down 
                                                            from 100(64 in hex)
                                                             results in a long 
                                                            enough delay so we 
                                                            can easily view the
                                                             changes in the LED
                                                            
  165 00000126 1E52    DelayInnerLoop
                               SUBS             R2,R2,#1    ;Subtract 1 from r2
                                                            .
  166 00000128 D000            BEQ              exitDelay   ;Exit if countdown 
                                                            is finished
  167 0000012A D1FC            BNE              DelayInnerLoop ;Minus one again
                                                             if counter is NOT 
                                                            zero.
  168 0000012C         
  169 0000012C         ;
  170 0000012C         ; code to generate a delay of 0.1mS * R0 times
  171 0000012C         ;
  172 0000012C BD04    exitDelay



ARM Macro Assembler    Page 7 


                               LDMFD            R13!,{R2, R15}
  173 0000012E         ;---------------------------------------------------
  174 0000012E         
  175 0000012E         
  176 0000012E 2009C000 
                       LED_BASE_ADR
                               EQU              0x2009c000  ; Base address of t
                                                            he memory that cont
                                                            rols the LEDs 
  177 0000012E 4002C00C 
                       PINSEL3 EQU              0x4002c00c  ; Address of Pin Se
                                                            lect Register 3 for
                                                             P1[31:16]
  178 0000012E 4002C010 
                       PINSEL4 EQU              0x4002c010  ; Address of Pin Se
                                                            lect Register 4 for
                                                             P2[15:0]
  179 0000012E 2009C054 
                       FIO2PIN EQU              0x2009c054
  180 0000012E         
  181 0000012E         ; Usefull GPIO Registers
  182 0000012E         ; FIODIR  - register to set individual pins as input or 
                       output
  183 0000012E         ; FIOPIN  - register to read and write pins
  184 0000012E         ; FIOSET  - register to set I/O pins to 1 by writing a 1
                       
  185 0000012E         ; FIOCLR  - register to clr I/O pins to 0 by writing a 1
                       
  186 0000012E         
  187 0000012E 00 00           ALIGN
  188 00000130         
  189 00000130                 END
              2009C000 
              2009C054 
Command Line: --debug --xref --cpu=Cortex-M3 --apcs=interwork --depend=Lab3_pro
gram.d -oLab3_program.o -IC:\Software\Keil\ARM\RV31\INC -IC:\Software\Keil\ARM\
CMSIS\Include -IC:\Software\Keil\ARM\Inc\NXP\LPC17xx --list=Lab3_program.lst La
b3_program.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

DELAY 00000120

Symbol: DELAY
   Definitions
      At line 163 in file Lab3_program.s
   Uses
      At line 34 in file Lab3_program.s
      At line 44 in file Lab3_program.s
      At line 73 in file Lab3_program.s
      At line 86 in file Lab3_program.s

DISPLAYBITS 000000A8

Symbol: DISPLAYBITS
   Definitions
      At line 96 in file Lab3_program.s
   Uses
      At line 59 in file Lab3_program.s
Comment: DISPLAYBITS used once
DISPLAY_ALL 00000060

Symbol: DISPLAY_ALL
   Definitions
      At line 59 in file Lab3_program.s
   Uses
      At line 65 in file Lab3_program.s
      At line 77 in file Lab3_program.s

DISPLAY_NUM 000000E4

Symbol: DISPLAY_NUM
   Definitions
      At line 129 in file Lab3_program.s
   Uses
      None
Comment: DISPLAY_NUM unused
DelayInnerLoop 00000126

Symbol: DelayInnerLoop
   Definitions
      At line 165 in file Lab3_program.s
   Uses
      At line 167 in file Lab3_program.s
Comment: DelayInnerLoop used once
INCR_POLL 00000040

Symbol: INCR_POLL
   Definitions
      At line 44 in file Lab3_program.s
   Uses
      At line 51 in file Lab3_program.s
Comment: INCR_POLL used once
LED_ON 00000034

Symbol: LED_ON
   Definitions
      At line 38 in file Lab3_program.s
   Uses
      At line 33 in file Lab3_program.s



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

Comment: LED_ON used once
My_code 00000000

Symbol: My_code
   Definitions
      At line 4 in file Lab3_program.s
   Uses
      None
Comment: My_code unused
RANDOM_COUNT_DELAY 00000024

Symbol: RANDOM_COUNT_DELAY
   Definitions
      At line 31 in file Lab3_program.s
   Uses
      At line 36 in file Lab3_program.s
Comment: RANDOM_COUNT_DELAY used once
REFLEXMETER 0000001C

Symbol: REFLEXMETER
   Definitions
      At line 28 in file Lab3_program.s
   Uses
      None
Comment: REFLEXMETER unused
RandomNum 000000E8

Symbol: RandomNum
   Definitions
      At line 140 in file Lab3_program.s
   Uses
      At line 24 in file Lab3_program.s
Comment: RandomNum used once
__MAIN 00000000

Symbol: __MAIN
   Definitions
      At line 7 in file Lab3_program.s
   Uses
      At line 5 in file Lab3_program.s
Comment: __MAIN used once
exitDelay 0000012C

Symbol: exitDelay
   Definitions
      At line 172 in file Lab3_program.s
   Uses
      At line 166 in file Lab3_program.s
Comment: exitDelay used once
fivecheck 0000008A

Symbol: fivecheck
   Definitions
      At line 73 in file Lab3_program.s
   Uses
      At line 75 in file Lab3_program.s
Comment: fivecheck used once
fivesecdelay 00000078




ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Relocatable symbols

Symbol: fivesecdelay
   Definitions
      At line 67 in file Lab3_program.s
   Uses
      At line 64 in file Lab3_program.s
Comment: fivesecdelay used once
loop 00000018

Symbol: loop
   Definitions
      At line 24 in file Lab3_program.s
   Uses
      None
Comment: loop unused
mini 0000009E

Symbol: mini
   Definitions
      At line 86 in file Lab3_program.s
   Uses
      At line 88 in file Lab3_program.s
Comment: mini used once
twosecdelay 00000098

Symbol: twosecdelay
   Definitions
      At line 83 in file Lab3_program.s
   Uses
      At line 61 in file Lab3_program.s
Comment: twosecdelay used once
18 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

FIO2PIN 2009C054

Symbol: FIO2PIN
   Definitions
      At line 179 in file Lab3_program.s
   Uses
      At line 29 in file Lab3_program.s
Comment: FIO2PIN used once
LED_BASE_ADR 2009C000

Symbol: LED_BASE_ADR
   Definitions
      At line 176 in file Lab3_program.s
   Uses
      At line 11 in file Lab3_program.s
Comment: LED_BASE_ADR used once
PINSEL3 4002C00C

Symbol: PINSEL3
   Definitions
      At line 177 in file Lab3_program.s
   Uses
      None
Comment: PINSEL3 unused
PINSEL4 4002C010

Symbol: PINSEL4
   Definitions
      At line 178 in file Lab3_program.s
   Uses
      None
Comment: PINSEL4 unused
4 symbols
354 symbols in table

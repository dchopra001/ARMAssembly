


ARM Macro Assembler    Page 1 


    1 00000000         ;*------------------------------------------------------
                       ----------------------
    2 00000000         ;* Name:    Lab_1_program.s 
    3 00000000         ;* Purpose: This code flashes one LED at approximately 1
                        Hz frequency 
    4 00000000         ;* Author: Eric Praetzel and Rasoul Keshavarzi 
    5 00000000         ;*------------------------------------------------------
                       ----------------------*/
    6 00000000                 THUMB                        ; Declare THUMB ins
                                                            truction set 
    7 00000000                 AREA             My_code, CODE, READONLY ; 
    8 00000000                 EXPORT           __MAIN      ; Label __MAIN is u
                                                            sed externally q
    9 00000000                 ENTRY
   10 00000000         __MAIN
   11 00000000         ; The following lines are similar to Lab-1 but use a def
                       ined address to make it easier.
   12 00000000         ; They just turn off all LEDs 
   13 00000000 F44F 4240       MOV              R2, #0xC000
   14 00000004 F04F 4330       MOV              R3, #0xB0000000 ; Turn off thre
                                                            e LEDs on port 1  
   15 00000008 F04F 0400       MOV              R4, #0x0
   16 0000000C F2C2 0409       MOVT             R4, #0x2009
   17 00000010 4414            ADD              R4, R4, R2  ; 0x2009C000 
   18 00000012 6223            STR              R3, [r4, #0x20]
   19 00000014 F04F 037C       MOV              R3, #0x0000007C
   20 00000018 6423            STR              R3, [R4, #0x40] ; Turn off five
                                                             LEDs on port 2 
   21 0000001A         
   22 0000001A         ResetLUT
   23 0000001A 4D3F            LDR              R5, =InputLUT ; assign R5 to th
                                                            e address at label 
                                                            LUT
   24 0000001C         
   25 0000001C         NextChar
   26 0000001C F000 F849       BL               LED_OFF
   27 00000020 F04F 0603       MOV              R6,#3       ;3 dots of delay be
                                                            fore each character
                                                            
   28 00000024 F000 F84A       BL               MultipleDelay
   29 00000028 7828            LDRB             R0, [R5]    ; Read a character 
                                                            to convert to Morse
                                                            ... WILL START BY L
                                                            OADING D,R,I,B
   30 0000002A F105 0501       ADD              R5, #1      ; point to next val
                                                            ue for number of de
                                                            lays, jump by 1 byt
                                                            e
   31 0000002E F090 0F00       TEQ              R0, #0      ; If we hit 0 (null
                                                             at end of the stri
                                                            ng) then reset to t
                                                            he start of lookup 
                                                            table
   32 00000032 D104            BNE              ProcessChar ; If we have a char
                                                            acter process it
   33 00000034         
   34 00000034         ;the section below just resets to the startt of the look
                       up table
   35 00000034 F04F 0604       MOV              R6, #4      ; delay 4 extra spa



ARM Macro Assembler    Page 2 


                                                            ces (7 total) betwe
                                                            en words...the last
                                                             letter will cause 
                                                            a 3 space delay?
   36 00000038 F000 F840       BL               MultipleDelay
   37 0000003C D0ED            BEQ              ResetLUT    ;if line 28 is true
                                                            , this branch will 
                                                            be executed
   38 0000003E         
   39 0000003E         ProcessChar
   40 0000003E         
   41 0000003E F000 F827       BL               CHAR2MORSE  ; convert ASCII to 
                                                            Morse pattern in R1
                                                              
   42 00000042         
   43 00000042         ;  Loop until we have a 1 bit to send 
   44 00000042         ; But this is confusing as we're shifting left, but the 
                       data is in the lowest 16 bits, so test at bit 16 for 1 o
                       r 0
   45 00000042         ;
   46 00000042 F04F 010F       MOV              R1,#0xF     ;16th bit value set
                                                             in R1--->COUNT
   47 00000046 F04F 0200       MOV              R2, #0x0    ;Flag with value se
                                                            t to 0
   48 0000004A         CHECKR1
   49 0000004A 2900            CMP              R1,#0x0     ;Check value in R1 
                                                            to see if its zero
   50 0000004C DBE6            BLT              NextChar    ;If R1 is zero, the
                                                             led has finished f
                                                            lashing... therefor
                                                            e, return to attain
                                                             the next character
                                                            
   51 0000004E D1FF            BNE              CHECKR0
   52 00000050         
   53 00000050         ;MOV  R6, #0x10000 ; Init R6 with the value for the bit 
                       which we wish to test
   54 00000050         ;LSL  R1, R1, #1 ; shift R1 right by 1, store in R1
   55 00000050         ;ANDS  R7, R1, R6 ; R7 gets R1 AND R6, Zero bit gets set
                        if it's zero
   56 00000050         ;BEQ  ; branch somewhere it's zero
   57 00000050         ;BNE  ; branch somewhere - it's not zero
   58 00000050         
   59 00000050         ;....  lots of code
   60 00000050         ;B   ;somewhere in your code!  ; This is the end of the 
                       main program 
   61 00000050         
   62 00000050         CHECKR0
   63 00000050         
   64 00000050 F44F 4700       MOV              R7,#0x8000  ;this is how we wil
                                                            l test the R1th bit
                                                             of R0
   65 00000054 EA17 0900       ANDS             R9,R7,R0    ;AND R0 and R7 to s
                                                            ee if 1 or 0
   66 00000058         ;CMN  R1,#2
   67 00000058 EA4F 0040       LSL              R0,#1       ;Left shift R0 by o
                                                            ne for next round o
                                                            f anding (so u can 
                                                            AND another digit l



ARM Macro Assembler    Page 3 


                                                            ater!)
   68 0000005C D009            BEQ              CHECKFLAG
   69 0000005E         
   70 0000005E BF18 F000 
              F820             BLNE             LED_ON
   71 00000064 F04F 0601       MOV              R6,#0x00000001
   72 00000068 F000 F828       BL               MultipleDelay
   73 0000006C F1A1 0101       SUB              R1,#1       ;R1-1
   74 00000070 E7EB            B                CHECKR1     ;Branch to check wh
                                                            at R1 is again
   75 00000072         
   76 00000072         
   77 00000072         CHECKFLAG
   78 00000072 2A00            CMP              R2,#0x0     ;Chck if Flag is 0 
                                                            or 1
   79 00000074 D000            BEQ              FLAGISZERO  ;BRANCH TO FLAG IS 
                                                            ZERO SUBROUTINE
   80 00000076 D102            BNE              FLAGISONE   ;BRANCH TO FLAG IS 
                                                            ONE SUBROUTINE
   81 00000078         
   82 00000078         
   83 00000078         FLAGISZERO
   84 00000078         ;MOV  R6,#0x00000001   ;SEt R6 to one so we can delay fo
                       r one dot
   85 00000078         ;BL  MultipleDelay   ;Cause delay for 1 dot
   86 00000078 F1A1 0101       SUB              R1,#1       ;R1-1 so we can com
                                                            pare it again
   87 0000007C E7E5            B                CHECKR1     ;Go back to check R
                                                            1!
   88 0000007E         
   89 0000007E         FLAGISONE
   90 0000007E F000 F818       BL               LED_OFF     ;Turn off LED
   91 00000082 F04F 0601       MOV              R6,#1       ;So delay is 1 dot
   92 00000086 F000 F819       BL               MultipleDelay
   93 0000008A F1A1 0101       SUB              R1,#1       ;So we can check r1
                                                             again
   94 0000008E E7DC            B                CHECKR1
   95 00000090         
   96 00000090         
   97 00000090         
   98 00000090         ; Subroutines
   99 00000090         ;
  100 00000090         ;   convert ASCII character to Morse pattern
  101 00000090         ;   pass ASCII character in R0, output in R1
  102 00000090         ;   index into MorseLuT must be by steps of 2 bytes
  103 00000090 B500    CHAR2MORSE
                               STMFD            R13!,{R14}  ; push Link Registe
                                                            r (return address) 
                                                            on stack
  104 00000092         ;
  105 00000092         
  106 00000092 F8DF B088       LDR              R11, =MorseLUT ;load the first 
                                                            mem. address of mor
                                                            se table in R11. 
  107 00000096 F1A0 0041       SUB              R0,R0,#0x41 ;this will get the 
                                                            index number of the
                                                             letter so we can l
                                                            ook for it in the M
                                                            orse table



ARM Macro Assembler    Page 4 


  108 0000009A EA4F 0040       LSL              R0, #1      ;Left shifting by 1
                                                             will multiply the 
                                                             index in 2. This i
                                                            s done because each
                                                             character takes 2 
                                                            bytes in memory
  109 0000009E F83B 0000       LDRH             R0, [R11,R0] ;R11 points to ind
                                                            ex 0 which is A..  
                                                            adding R0 will get 
                                                            the index for the c
                                                            haracter in the tab
                                                            le and then store t
                                                            he contents of that
                                                             index in R12 
  110 000000A2         ;R12 HAS THE MORSE PATTERN!
  111 000000A2         ;MOV  R0,R12    ;Mov into R0, the morse pattern (which i
                       s stored in R12 actually)
  112 000000A2         ;.. add code here to convert the ASCII to an index (subt
                       ract 41) and lookup the Morse patter in the Lookup Table
                       
  113 000000A2         ;
  114 000000A2 BD00            LDMFD            R13!,{R15}  ; restore LR to R15
                                                             the Program Counte
                                                            r to return
  115 000000A4         
  116 000000A4         
  117 000000A4         ; Turn the LED on, but deal with the stack in a simpler 
                       way
  118 000000A4         ; NOTE: This method of returning from subroutine (BX  LR
                       ) does NOT work if subroutines are nested!!
  119 000000A4         ;
  120 000000A4 B500    LED_ON  STMFD            R13!,{R14}  ; push Link Registe
                                                            r (return address) 
                                                            on stack
  121 000000A6         ;push   {r3-r4}  ; preserve R3 and R4 on the R13 stack
  122 000000A6 F04F 5280       MOV              R2,#0x10000000 ;Set flag to 1
  123 000000AA F04F 4320       MOV              R3,#0xA0000000
  124 000000AE 6223            STR              R3,[R4,0x20] ;Store A  in 2009c
                                                            020,turning the LED
                                                             ON  
  125 000000B0         ;... insert your code here
  126 000000B0         
  127 000000B0 BD00            LDMFD            R13!,{R15}  ; restore LR to R15
                                                             the Program Counte
                                                            r to return  
  128 000000B2         ;pop   {r3-r4}
  129 000000B2         ;BX   LR  ; branch to the address in the Link Register. 
                        Ie return to the caller
  130 000000B2         
  131 000000B2 B508    LED_OFF STMFD            R13!,{R3, R14} ; push R3 and Li
                                                            nk Register (return
                                                             address) on stack
  132 000000B4 F04F 4330       MOV              R3, #0xB0000000 ;Move the OFF C
                                                            ode in  R3
  133 000000B8 6223            STR              R3,[R4,0x20] ;Turn OFF the led 
                                                            by putting B in 200
                                                            9c020
  134 000000BA         ;... insert your code here
  135 000000BA BD08            LDMFD            R13!,{R3, R15} ; restore R3 and



ARM Macro Assembler    Page 5 


                                                             LR to R15 the Prog
                                                            ram Counter to retu
                                                            rn
  136 000000BC         
  137 000000BC         ; Delay 500ms * R0 times
  138 000000BC         ; Use the delay loop from Lab-1 but loop R0 times around
                       
  139 000000BC         ;
  140 000000BC         ;DELAY  STMFD  R13!,{R14} ;Removed R2,R14
  141 000000BC B500    MultipleDelay
                               STMFD            R13!,{R14}  ;Removed R2,R14
  142 000000BE 2E00    SECOND  CMP              R6, #0      ; test R0 to see if
                                                             it's 0 - set Zero 
                                                            flag so you can use
                                                             BEQ, BNE
  143 000000C0 F1A6 0601       SUB              R6, #1      ;R0 - 1
  144 000000C4 D101            BNE              DELAYSTART  ;if not zero, run d
                                                            elay again
  145 000000C6 D008            BEQ              exitDelay   ;if 0, exit delay m
                                                            ethod
  146 000000C8         
  147 000000C8 E7F9            B                SECOND      ;Branch to Multiple
                                                             Delay to test agai
                                                            n
  148 000000CA         
  149 000000CA F64F 7AFF 
                       DELAYSTART
                               MOV              R10, 0xFFFF ;Move a large value
                                                             in R10    DELAYSTA
                                                            RT->NESTED SUBROUTI
                                                            NE TO AVOID CONTINU
                                                            ALLY UPDATING STACK
                                                             
  150 000000CE EA4F 0A8A       LSL              R10, #2
  151 000000D2 F1BA 0A01 
                       loop    SUBS             R10, #1     ;R9-1
  152 000000D6         ;CMP   R10, #0x0   ;Compare to see if R9 is zero yet
  153 000000D6 D1FC            BNE              loop
  154 000000D8 D0F1            BEQ              SECOND
  155 000000DA         
  156 000000DA         ;... insert your code here
  157 000000DA BD00    exitDelay
                               LDMFD            R13!,{R15}  ;Removed R2,R14
  158 000000DC         
  159 000000DC         ;
  160 000000DC         ; Data used in the program
  161 000000DC                 ALIGN                        ; make sure things 
                                                            fall on word addres
                                                            ses
  162 000000DC 54 48 45 
              50 00    InputLUT
                               DCB              "THEP", 0   ; strings must be s
                                                            tored, and read, as
                                                             BYTES
  163 000000E1         
  164 000000E1 00 00 00        ALIGN                        ; make sure things 
                                                            fall on word addres
                                                            ses
  165 000000E4         MorseLUT



ARM Macro Assembler    Page 6 


  166 000000E4 17 00 D5 
              01 5D 07 
              75 00            DCW              0x17, 0x1D5, 0x75D, 0x75 
                                                            ; A, B, C, D
  167 000000EC 01 00 5D 
              01 DD 01 
              55 00            DCW              0x1, 0x15D, 0x1DD, 0x55 
                                                            ; E, F, G, H
  168 000000F4 05 00 77 
              17 D7 01 
              75 01            DCW              0x5, 0x1777, 0x1D7, 0x175 
                                                            ; I, J, K, L
  169 000000FC 77 00 1D 
              00 77 07 
              DD 05            DCW              0x77, 0x1D, 0x777, 0x5DD 
                                                            ; M, N, O, P
  170 00000104 D7 1D 5D 
              00 15 00 
              07 00            DCW              0x1DD7, 0x5D, 0x15, 0x7 
                                                            ; Q, R, S, T
  171 0000010C 57 00 57 
              01 77 01 
              57 07            DCW              0x57, 0x157, 0x177, 0x757 
                                                            ; U, V, W, X
  172 00000114 77 1D 75 
              07               DCW              0x1D77, 0x775 ; Y, Z
  173 00000118         
  174 00000118         ; One can also define an address using the EQUate direct
                       ive
  175 00000118         ;
  176 00000118 2009C020 
                       LED_ADR EQU              0x2009c020  ; Address of the me
                                                            mory that controls 
                                                            the LED 
  177 00000118         
  178 00000118                 END
              00000000 
              00000000 
Command Line: --debug --xref --cpu=Cortex-M3 --apcs=interwork --depend=Lab_2_Pr
ogram.d -oLab_2_Program.o -IC:\Software\Keil\ARM\RV31\INC -IC:\Software\Keil\AR
M\CMSIS\Include -IC:\Software\Keil\ARM\Inc\NXP\LPC17xx --list=Lab_2_Program.lst
 Lab_2_Program.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

CHAR2MORSE 00000090

Symbol: CHAR2MORSE
   Definitions
      At line 103 in file Lab_2_Program.s
   Uses
      At line 41 in file Lab_2_Program.s
Comment: CHAR2MORSE used once
CHECKFLAG 00000072

Symbol: CHECKFLAG
   Definitions
      At line 77 in file Lab_2_Program.s
   Uses
      At line 68 in file Lab_2_Program.s
Comment: CHECKFLAG used once
CHECKR0 00000050

Symbol: CHECKR0
   Definitions
      At line 62 in file Lab_2_Program.s
   Uses
      At line 51 in file Lab_2_Program.s
Comment: CHECKR0 used once
CHECKR1 0000004A

Symbol: CHECKR1
   Definitions
      At line 48 in file Lab_2_Program.s
   Uses
      At line 74 in file Lab_2_Program.s
      At line 87 in file Lab_2_Program.s
      At line 94 in file Lab_2_Program.s

DELAYSTART 000000CA

Symbol: DELAYSTART
   Definitions
      At line 149 in file Lab_2_Program.s
   Uses
      At line 144 in file Lab_2_Program.s
Comment: DELAYSTART used once
FLAGISONE 0000007E

Symbol: FLAGISONE
   Definitions
      At line 89 in file Lab_2_Program.s
   Uses
      At line 80 in file Lab_2_Program.s
Comment: FLAGISONE used once
FLAGISZERO 00000078

Symbol: FLAGISZERO
   Definitions
      At line 83 in file Lab_2_Program.s
   Uses
      At line 79 in file Lab_2_Program.s
Comment: FLAGISZERO used once
InputLUT 000000DC



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols


Symbol: InputLUT
   Definitions
      At line 162 in file Lab_2_Program.s
   Uses
      At line 23 in file Lab_2_Program.s
Comment: InputLUT used once
LED_OFF 000000B2

Symbol: LED_OFF
   Definitions
      At line 131 in file Lab_2_Program.s
   Uses
      At line 26 in file Lab_2_Program.s
      At line 90 in file Lab_2_Program.s

LED_ON 000000A4

Symbol: LED_ON
   Definitions
      At line 120 in file Lab_2_Program.s
   Uses
      At line 70 in file Lab_2_Program.s
Comment: LED_ON used once
MorseLUT 000000E4

Symbol: MorseLUT
   Definitions
      At line 165 in file Lab_2_Program.s
   Uses
      At line 106 in file Lab_2_Program.s
Comment: MorseLUT used once
MultipleDelay 000000BC

Symbol: MultipleDelay
   Definitions
      At line 141 in file Lab_2_Program.s
   Uses
      At line 28 in file Lab_2_Program.s
      At line 36 in file Lab_2_Program.s
      At line 72 in file Lab_2_Program.s
      At line 92 in file Lab_2_Program.s

My_code 00000000

Symbol: My_code
   Definitions
      At line 7 in file Lab_2_Program.s
   Uses
      None
Comment: My_code unused
NextChar 0000001C

Symbol: NextChar
   Definitions
      At line 25 in file Lab_2_Program.s
   Uses
      At line 50 in file Lab_2_Program.s
Comment: NextChar used once



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Relocatable symbols

ProcessChar 0000003E

Symbol: ProcessChar
   Definitions
      At line 39 in file Lab_2_Program.s
   Uses
      At line 32 in file Lab_2_Program.s
Comment: ProcessChar used once
ResetLUT 0000001A

Symbol: ResetLUT
   Definitions
      At line 22 in file Lab_2_Program.s
   Uses
      At line 37 in file Lab_2_Program.s
Comment: ResetLUT used once
SECOND 000000BE

Symbol: SECOND
   Definitions
      At line 142 in file Lab_2_Program.s
   Uses
      At line 147 in file Lab_2_Program.s
      At line 154 in file Lab_2_Program.s

__MAIN 00000000

Symbol: __MAIN
   Definitions
      At line 10 in file Lab_2_Program.s
   Uses
      At line 8 in file Lab_2_Program.s
Comment: __MAIN used once
exitDelay 000000DA

Symbol: exitDelay
   Definitions
      At line 157 in file Lab_2_Program.s
   Uses
      At line 145 in file Lab_2_Program.s
Comment: exitDelay used once
loop 000000D2

Symbol: loop
   Definitions
      At line 151 in file Lab_2_Program.s
   Uses
      At line 153 in file Lab_2_Program.s
Comment: loop used once
20 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

LED_ADR 2009C020

Symbol: LED_ADR
   Definitions
      At line 176 in file Lab_2_Program.s
   Uses
      None
Comment: LED_ADR unused
1 symbol
353 symbols in table
